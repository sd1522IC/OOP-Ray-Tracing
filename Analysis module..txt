"""Analysis module."""
import matplotlib.pyplot as plt
import numpy as np
import raytracer.rays as rays

from raytracer.elements import SphericalRefraction
from raytracer.elements import OutputPlane
from raytracer.rays import Ray
from raytracer.rays import RayBundle
from raytracer.lenses import PlanoConvex

from raytracer import rays
from raytracer import elements


def task8():
    """
    Task 8.

    In this function you should check your propagate_ray function properly
    finds the correct intercept and correctly refracts a ray. Don't forget
    to check that the correct values are appended to your Ray object.
    """

    test_array1 = rays.Ray([1,2,3])
    test_array2 = rays.Ray([3,4,5])

    #instance of class 
    lens = elements.SphericalRefraction()

    #for loop that passes postional test_arrays through propagate function
    checked_ray1 = lens.propagate_ray(test_array1)
    checked_ray2 = lens.propagate_ray(test_array2)
    return checked_ray1, checked_ray2
    


def task10():
    """
    Task 10.

    In this function you should create Ray objects with the given initial positions.
    These rays should be propagated through the surface, up to the output plane.
    You should then plot the tracks of these rays.
    This function should return the matplotlib figure of the ray paths.

    Returns:
        Figure: the ray path plot.
    """
    #instance of class (Strange doing it the other way only works for task 8 and not this one?): 
    lens = SphericalRefraction(z_0 = 100.0, aperture = 5.0, curvature = 0.03, n_1 = 1.0, n_2= 1.5)
    output = OutputPlane(z_0 =250)
    ray = Ray() #passes test
    
    ray1 = rays.Ray([0, 4, 0])
    ray2 = rays.Ray([0, 1, 0])
    ray3 = rays.Ray([0, 0.2, 0])
    ray4 = rays.Ray([0, 0, 0])
    ray5 = rays.Ray([0, -0.2, 0])
    ray6 = rays.Ray([0, -1, 0])
    ray7 = rays.Ray([0, -4, 0])
    ray_squad = [ray1, ray2, ray3, ray4, ray5, ray6, ray7]

    fig, pt = plt.subplots()

    #pass ray through propogate func
    for r in ray_squad:
        lens.propagate_ray(r)
        output.propagate_ray(r)

        vertices = r.vertices()

        y = [arr[1] for arr in vertices]
        z = [arr[2] for arr in vertices]

        pt.grid()
        pt.plot(z,y)

    return fig

def task11():
    """
    Task 11.

    In this function you should propagate the three given paraxial rays through the system
    to the output plane and the tracks of these rays should then be plotted.
    This function should return the following items as a tuple in the following order:
    1. the matplotlib figure object for ray paths
    2. the calculated focal point.

    Returns:
        tuple[Figure, float]: the ray path plot and the focal point
    """

    #instance of class 
    lens = SphericalRefraction(z_0 = 100.0, aperture = 34.0, curvature = 0.03, n_1 = 1.0, n_2= 1.5)
    output = OutputPlane(z_0 =250)
    
    ray1 = rays.Ray([0.1, 0.1, 0])
    ray2 = rays.Ray([0, 0, 0])
    ray3 = rays.Ray([-0.1, -0.1, 0])
    ray_squad = [ray1, ray2, ray3]

    fig, pt = plt.subplots()

    for r in ray_squad:
        lens.propagate_ray(r)
        output.propagate_ray(r)
        vertices = r.vertices()
        
        f = lens.focal_point()

        y = [arr[1] for arr in vertices]
        z = [arr[2] for arr in vertices]

        pt.grid()
        pt.plot(z,y)

    return fig, f


def task12():
    """
    Task 12.

    In this function you should create a RayBunble and propagate it to the output plane
    before plotting the tracks of the rays.
    This function should return the matplotlib figure of the track plot.

    Returns:
        Figure: the track plot.
    """
    sr = elements.SphericalRefraction(z_0=100, aperture=34., curvature=0.03, n_1=1., n_2=1.5)
    op = OutputPlane(250)
    raybundle = RayBundle()
    propagated = raybundle.propagate_bundle([sr, op])

    return propagated.track_plot()

task12()

def task13():
    """
    Task 13.

    In this function you should again create and propagate a RayBundle to the output plane
    before plotting the spot plot.
    This function should return the following items as a tuple in the following order:
    1. the matplotlib figure object for the spot plot
    2. the simulation RMS

    Returns:
        tuple[Figure, float]: the spot plot and rms
    """

    sr = SphericalRefraction(z_0=100, aperture=30., curvature=0.03, n_1=1., n_2=1.5)
    op = OutputPlane(200)
    raybundle = RayBundle()
    propagated_bundle = raybundle.propagate_bundle([sr, op])

    spot_figure = propagated_bundle.spot_plot()
    rms_value = propagated_bundle.rms()
    print('RMS VAL',rms_value)

    return (spot_figure, rms_value)

def task14():
    """
    Task 14.

    In this function you will trace a number of RayBundles through the optical system and
    plot the RMS and diffraction scale dependence on input beam radii.
    This function should return the following items as a tuple in the following order:
    1. the matplotlib figure object for the diffraction scale plot
    2. the simulation RMS for input beam radius 2.5
    3. the diffraction scale for input beam radius 2.5

    Returns:
        tuple[Figure, float, float]: the plot, the simulation RMS value, the diffraction scale.
    """

    fig, pt = plt.subplots()

    sr = SphericalRefraction(z_0=100., aperture=34., curvature=0.03, n_1=1., n_2=1.5)
    op = OutputPlane(z_0=200)

    radii = np.arange(0.1, 10, 0.5)  # Example radii from 0.5 to 5.0
    rms_values = []
    diffraction_scales = []

    wavelength = 0.000588  # Wavelength for diffraction scale calculation
    mag_focal = sr.focal_point() - sr.z_0()
    
    for radius in radii:

        raybundle = RayBundle(rmax=radius)
        propagated=raybundle.propagate_bundle([sr, op])
        rms_value = propagated.rms()
        rms_values.append(rms_value)
        diffraction_scale = (wavelength*mag_focal )/(2*radius)
        diffraction_scales.append(diffraction_scale)
    
    # RMS vals
    plt.figure()
    plt.plot(radii, rms_values, label='RMS Value')
    plt.xlabel('Input Beam Radius')
    plt.ylabel('RMS Value')
    plt.tick_params(axis='y')
    
    #diffraction scale
    plt.plot(radii, diffraction_scales, label='Diffraction Scale')
    plt.ylabel('Diffraction Scale')
    plt.tick_params(axis='y')

    #plot
    plt.title('Radial Dependence of RMS Value and Diffraction Scale')
    plt.legend()
    plt.grid(True)
    plt.show()

    rms2_5 = RayBundle(rmax=2.5).propagate_bundle([sr,op]).rms()
    diff2_5 = (wavelength*mag_focal)/(2*2.5)

    return (fig, rms2_5, diff2_5)


def task15():
    """
    Task 15.

    In this function you will create plano-convex lenses in each orientation and propagate a RayBundle
    through each to their respective focal point. You should then plot the spot plot for each orientation.
    This function should return the following items as a tuple in the following order:
    1. the matplotlib figure object for the spot plot for the plano-convex system
    2. the focal point for the plano-convex lens
    3. the matplotlib figure object for the spot plot for the convex-plano system
    4  the focal point for the convex-plano lens


    Returns:
        tuple[Figure, float, Figure, float]: the spot plots and rms for plano-convex and convex-plano.
    """
    rb = RayBundle(rmax=5., nrings=5, multi=6)
    pc = PlanoConvex (z_0=100.0, curvature1=0.02, curvature2=0.02, n_inside=1.5168, n_outside=1, thickness=5, aperture=50)
    focal_point = pc.focal_point()
    op = OutputPlane(focal_point)
    
    propagated_spotplot = rb.propagate_bundle([pc,op]).spot_plot()
    propagated = rb.propagate_bundle([pc, op]).track_plot()
  
    return (propagated_spotplot,propagated)

#task15()

def task16():
    """
    Task 16.

    In this function you will be again plotting the radial dependence of the RMS and diffraction values
    for each orientation of your lens.
    This function should return the following items as a tuple in the following order:
    1. the matplotlib figure object for the diffraction scale plot
    2. the RMS for input beam radius 3.5 for the plano-convex system
    3. the RMS for input beam radius 3.5 for the convex-plano system
    4  the diffraction scale for input beam radius 3.5

    Returns:
        tuple[Figure, float, float, float]: the plot, RMS for plano-convex, RMS for convex-plano, diffraction scale.
    """
    return


if __name__ == "__main__":

    # Run task 8 function

    # Run task 10 function
    # FIG10 = task10()

    # Run task 11 function
    # FIG11, FOCAL_POINT = task11()

    # Run task 12 function
    # FIG12 = task12()

    # Run task 13 function
    #FIG13, TASK13_RMS = task13()

    # Run task 14 function
    # FIG14, TASK14_RMS, TASK14_DIFF_SCALE = task14()

    # Run task 15 function
    # FIG15_PC, FOCAL_POINT_PC, FIG15_CP, FOCAL_POINT_CP = task15()

    # Run task 16 function
    # FIG16, PC_RMS, CP_RMS, TASK16_DIFF_SCALE = task16()
    plt.show()
